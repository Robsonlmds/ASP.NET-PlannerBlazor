@page "/"
@* /// RenderMode /// *@
@rendermode InteractiveServer

@* // Importando o Service // *@
@using PlannerBlazor.Services
@inject TodoService todoService

<PageTitle>Lista de Tarefas</PageTitle>

<h3>Lista de Tarefas</h3>

<button class="btn btn-dark" @onclick="GetActiveTodoAsync">Recarregar</button>

@* /// Vericar se a tabela existe, se sim, mostra-la /// *@
@if (todos != null && todos.Any())
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Title</th>
                <th>Priority</th>
                <th>Done</th>
                <th>DneDate</th>
                <th>*</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var todo in todos) {

                <tr 
                    style="cursor: pointer; @(todo.Done ? "text-decoration: line-through;" : "" );" 
                    class="@(todo.Priority == TodoPriority.Urgent ? "table-danger" : "")"> @* /// Condição (Se for urgente = Vermelho), Condição (Se for concluida, ficara sublinhado) /// *@

                    <td @onclick="() => EditTodo(todo)" >@todo.Title</td>
                    <td @onclick="() => ChangePriorityAsync(todo)">
                        @todo.Priority
                    </td>
                    <td><input type="checkbox" checked="@todo.Done" @onchange="() => UpdateDoneDate(todo)"></td> @* /// Chamando de o método de forma ANÔNIMA /// *@
                    <td>@(todo.DoneDate.HasValue ? todo.DoneDate.Value.ToString("dd/MM/yyyy") : "")</td> @* /// Condição para corrigir a data, se ela for diferente de null /// *@
                    <td>
                        <button class="btn btn-dark" @onclick="() => EditTodo(todo)">Editar</button> @* /// Chamando de o método de forma ANÔNIMA /// *@
                        <button class="btn btn-danger" @onclick="() => RemoveTodoAsync(todo)">Excluir</button> @* /// Chamando de o método de forma ANÔNIMA /// *@
                    </td>
                </tr>

                @if (todo.Edit) {

                    <tr>
                        <td colspan="5">
                            <FormTodo EditedTodo="todo"></FormTodo>
                        </td>
                    </tr>

                }
            }
        </tbody>
    </table>
}
else
{
    <p> Nenhuma Tarefa listada</p>
}

<button class="btn btn-dark" @onclick="AddTodoAsync"> Adicionar Tarefa </button>


@code {

    // Criação de lista para a manipulação // 
    private List<Todo>? todos;

    //// <summary>
    /// Método para "Recarregar (GetActivesTodosAsync()) Assim q iniciar a aplicação"
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync() {
        await GetActiveTodoAsync();
    }

    //// <summary>
    /// Método que tras todas as tarefas ativas
    /// </summary>
    private async Task GetActiveTodoAsync() {
        todos = await todoService.GetActivesTodosAsync();
    }

    //// <summary>
    /// Método que adiciona uma nova tarefas
    /// </summary>
    private async Task AddTodoAsync() {
        //
        await todoService.NewTodoAsync();
        await GetActiveTodoAsync();
    }

    //// <summary>
    /// Método que adiciona a data, quando concluido a tarefa
    /// </summary>
    /// <param name="todo"> um task, no modelo de "TODO" </param>
    private void UpdateDoneDate(Todo todo) {
        if (todo.Done) {
            todo.DoneDate = null;  
            todo.Done = false;
        } else {
            todo.DoneDate = DateTime.Now;
            todo.Done = true;
        }
    }

    //// <summary>
    /// Método que remove uma ToDo
    /// </summary>
    /// <param name="todo"> um task, no modelo de "TODO" </param>
    private async Task RemoveTodoAsync(Todo todo) {
        await todoService.DeleteAsync(todo);
        await GetActiveTodoAsync();
    }


    //// <summary>
    /// Método que torna o "true" em "false" tipo um porta logica "NOT"
    /// </summary>
    /// <param name="todo"> um task, no modelo de "TODO" </param>
    private void EditTodo(Todo todo) {
        todo.Edit = !todo.Edit;
    }

    //// <summary>
    /// Método que mudar a prioridade da tarefa
    /// </summary>
    /// <param name="todo"> um task, no modelo de "TODO" </param>
    private async Task ChangePriorityAsync(Todo todo) {
        var priorityIndex = (int)todo.Priority;
        priorityIndex ++;
        todo.Priority = priorityIndex > 3 ? TodoPriority.Urgent : (TodoPriority)priorityIndex;

        await todoService.UpdateAsync(todo);
    }
}